# -----------------------------------------------------------------------------
# makeinitialdb.py
# run this python script to create the initial DB on couchdb
# last update 2013-01-02 1301 2nd st. Palacios
# -----------------------------------------------------------------
import couchdb
import random
# milsecs for 2005-08-23 00:00:00 + 1, the day I came to Canada
__origin_time = '1124769600001'

# generate 31 chars id:17 random chars(no T)+'T'+ 13 digits (milsecs since 1970)
def id_gen():
    charsource = 'abcdefghijklmnopqrsuvwxyzABCDEFGHIJKLMNOPQRSUVWXYZ'
    msg = ''
    for i in range(17):
        msg += random.choice(charsource)
    return msg + 'T'+__origin_time # 18+13=31 chars long id

    
# coucDB interface class
class DBPortal:
    def __init__(self, host, port, name):
        self.server = couchdb.Server('http://'+host +':'+port)
        self.name = name
        self.port = port
        if name in self.server:
            self.db = self.server[name]
        else:
            self.db = self.server.create(name)
        
    def save_doc(self,doc):
        # if doc does not have _id or _rev, they will be generated by couchdb
        # if doc has _id, it must have lthe latest _rev.
        self.db.save(doc)
        
    def del_doc(self, doc):
        # doc needs to have _id and _rev only, where _rev has to be the latest
        self.db.delete(doc)
        
    def initialize_hft(self, doc_list):
        for doc in doc_list:
            print 'saving ',doc
            self.db.save(doc)

# make a list of docs to initialize couchDB for a test account
def make_docs():
    lst = []
    # 1. F1 instance(f1): _id is fid of the first generated promocode.
    # to generate fids: python pcodegen.py -> promocodes.py
    FID = 'G8FVL9L' # 
    lst.append({'_id':FID,    # sys-gen
                'cid':'F1',
                'tx':'0',
                'name':'ftc',
                'synop':'ftc-family',
                'lastupdate':'1124769600001'}) # milsecs since 1970
    # ------------------------------------------------------------
    # 2. create the first person P1 inst, with vid=1
    p1eid = id_gen()
    lst.append({'_id':p1eid+'_1',   # id + vid=1
                'cid':'P1',         # class name P1
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # original tx is '0'
                'dob':'19551216',   # date of birth
                'dod':'',           # yet alive
                'sex':'male',       # a man
                'synop':'ftc owner' #
    })
    # 3. create a RL-doc connecting f1-p1
    lst.append({'_id':id_gen(),
                'fid':FID,          # belong to FID (f1)
                'cid':'RL',         # RL cid
                'tx':'0',           # original tx is '0'
                'leid':FID,         # left end: F1 inst - f1
                'reid':p1eid,       # first person P1 inst
                'lconts':['people'],# f1.conts['people'] contains p1
                'rconts':[]})       # p1 doesn't need back point to f1

    # 4 create ip for accounts
    ip1eid = id_gen()
    lst.append({'_id':ip1eid + '_1',
                'cid':'IP',         # gui-config class
                'fid':FID,
                'tx':'0',
                'name': 'M7014',    # accounts
                'title': 'Accounts',# mouse-over pop up subj to locale
                'config':[
                    'bg32x32_pic1.jpg','fr32x32pic1.jpg','ic32x32pic1.jpg']
            })

    # 5. create a RL connecting p1-ip1
    lst.append({'_id':id_gen(),
                'cid':'RL',
                'fid':FID,          # belong to FID (f1)
                'tx':'0',
                'leid':p1eid,       # p1 is the host-node
                'reid':ip1eid,      # ip1 is the child-ele of p1 contained in
                'lconts':['ips'],   # p1.ips:[ip1, ip2,...]
                'rconts':[]})

    # 6. create a A1-doc(login account) a1 for p1 and f1
    a11eid = id_gen()
    lst.append({'_id':a11eid+'_1',  # id = uuid+_<vid>
                'cid':'A1',         # class name of ftc login account
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # 0 sys-gen
                'ipname':'M7014',   # name of containing info-pane
                'usrname':'admin',  # user name when login
                'psswrd':'password',# password when login
                'ucode':'sadmin'})  # super-admin (can be: fadmin, user)

    # 7. create a RL-doc connecting p1-a1
    lst.append({'_id':id_gen(),
                'cid':'RL',         # RL cid
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # original tx is '0'
                'leid':p1eid,       # left end: P1 inst p1
                'reid':a11eid,      # ftc-login account a1 under f1
                'lconts':['accounts'],# p1.accounts['logins'] contains a1
                'rconts':[]})       # a1 doesn't need back point to p1

    # 8 create ip for titles and names
    ip2eid = id_gen()
    lst.append({'_id':ip2eid + '_1',
                'cid':'IP',           # gui-config class
                'fid':FID,
                'tx':'0',
                'name': 'M7015',      # titles and names
                'title': 'Accounts',  # mouse-over pop up subj to locale
                'config':[
                    'bg32x32_pic1.jpg','fr32x32pic1.jpg','ic32x32pic1.jpg']
                })

    # 9. create a RL-doc connecting p1-ip2
    lst.append({'_id':id_gen(),
                'cid':'RL',         # RL cid
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # original tx is '0'
                'leid':p1eid,       # left end: P1 inst p1
                'reid':ip2eid,      # ftc-login account a1 under f1
                'lconts':['ips'],   # p1.ips:[...,ip2]
                'rconts':[]})       # a1 doesn't need back point to p1

    # 10. create a T1-doc for p1
    t1eid = id_gen()
    lst.append({'_id':t1eid+'_1',    # id = uuid+_<vid>
                'cid':'T1',          # class name of personal name/title
                'fid':FID,           # belong to FID (f1)
                'tx':'0',            # 0 sys-gen
                'ipname':'M7015',    # name of containing ip
                'type':'legal name', # type
                'given':'first-name',# user name when login
                'middle':'',         # password when login
                'family':'faname'})  # family name

    # 11. create a RL-doc connecting p1-t1
    lst.append({'_id':id_gen(),
                'cid':'RL',         # RL cid
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # original tx is '0'
                'leid':p1eid,       # left end: p1.eid
                'reid':t1eid,       # name t1.eid under p1
                'lconts':['names'], # p1.conts['names'] contains t1
                'rconts':[]})       # t1 doesn't point back to p1

    # 12. create an E1-doc(email) for p1
    e1eid = id_gen()
    lst.append({'_id':e1eid+'_1',   # id = uuid+_<vid>
                'cid':'E1',         # class name of email
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # 0 sys-gen
                'ipname':'M7014',   # name of containing ip
                'type': 'web email',# type
                'title':'for ftc',  # user given title
                'address':'me.myself@ftc.com' # full address
                })

    # 13. create a RL-doc connecting p1-e1
    lst.append({'_id':id_gen(),
                'cid':'RL',         # RL cid
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # original tx is '0'
                'leid':p1eid,       # left end: p1.eid
                'reid':e1eid,       # email e1.eid under p1
                'lconts':['emails'],# p1.conts['names'] contains t1
                'rconts':['']})     #

    # 14. create a virtual couple B1 - b1 p1's parents
    b1eid = id_gen()
    lst.append({'_id':b1eid+'_1',   # id = uuid+_<vid>
                'cid': 'B1',        # B1 class
                'fid':FID,          # belong to FID (f1)
                'tx':'0',           # 
                'type':'virtual',   # virtual|married|departed|partner
                'uday': '10800101', # unknown date of union
                'synop':'2b filled'})#

    # 15. create a RL-doc connecting b1-p1
    lst.append({'_id':id_gen(),
                'cid':'RL',
                'fid':FID,          # belong to FID (f1)
                'tx':'0',            # 0 - sys-gen
                'leid':b1eid,       # b1 is the parent-node
                'reid':p1eid,       # p1 is the child
                'lconts':['children'],# b1 has p1 as one of the children
                'rconts':['parents']})# p1 has b1 as parent-node
    
    # 16. create a BC doc (bonds-constellation) of p1
    bceid = id_gen()
    lst.append({'_id':bceid+'_1',   # vid=1
                'cid':'BC',
                'fid':FID,          # belong to FID (f1)
                'tx':'0',
                'rootb1eid':b1eid,  # b1 as root
                'b1scs':[{
                    'b1eid':b1eid,
                    'mad':0,
                    'fad':0,
                    'anchorsex':'male',
                    'show':1}]
                })

    # 17. create a RL-doc connecting p1-bc
    lst.append({'_id':id_gen(),
                'cid':'RL',
                'fid':FID,          # belong to FID (f1)
                'tx':'0',
                'leid':p1eid,       # p1 is the parent-node
                'reid':bceid,       # bc is the child
                'lconts':['bconfs'],# bc is 1 of p1's bond-configs
                'rconts':[]})

    # 18. create a theme doc
    th1eid = id_gen()
    lst.append({'_id': th1eid + '_1',
                'cid': 'TH',    # theme class
                'fid':FID,
                'tx':'0',
                'name': 'the theme',
                'configs': {
                    'ft_bg':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'ftbulletin':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7001':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7002':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7003':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7004':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7005':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7006':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7007':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7008':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7009':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7010':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7011':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7012':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7013':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7014':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg'],
                    'M7015':['bg_pic1_100x100.jpg','fr_pic1.jpg','icon_pic_32x32.jpg']
                }
            })

    # 19. create a RL connecting p1-th
    lst.append({'_id': id_gen(),
                'cid': 'RL',
                'fid': FID,
                'tx':'0',
                'leid': p1eid,
                'reid': th1eid,
                'lconts':['themes'],
                'rconts':[]
    })

    # 20. create a life chronicle info-pane(ip) for p1
    ip3eid = id_gen()
    lst.append({'_id':ip3eid + '_1',
                'cid':'IP',           # gui-config class
                'fid':FID,
                'tx':'0',
                'name': 'M7001',   # life chronicle
                'title': 'life chronicle',  # mouse-over pop up subj to locale
                'config':[
                    'bg32x32_pic1.jpg','fr32x32pic1.jpg','ic32x32pic1.jpg']
                })

    # 21. create a RL connecting p1-ip3
    lst.append({'_id':id_gen(),
                'cid':'RL',
                'fid':FID,          # belong to FID (f1)
                'tx':'0',
                'leid':p1eid,       # p1 is the parent-node
                'reid':ip3eid,      # ip1 is the child
                'lconts':['ips'],   # ip1 is 1 of p1's info-panes
                'rconts':[]})

    # 22. create a bank account A2 under ip1 (accoutns/M7014)
    a21eid = id_gen()
    lst.append({'_id': a21eid + '_1',
                'cid': 'A2',        # bank account
                'fid': FID,    
                'tx': '0',
                'ipname': 'M7014',
                # user crendentials
                'credential_dict':{
                    'owner': 'user1',
                    'pwd':'111',
                    'security question':'first pet',
                    'answer':'gravy'},
                'type': 'checking',
                'title': 'locale',
                # identifying info
                'ID_dict':{
                    'accout number':'123-321',
                    'branch':'abc',
                    'routing':'',
                    'address': '1301 2nd. Palacios TX 77461 on the moon',
                    'web-addr':'https://www.thebank.com/login'
                },
                'synop':''
    })

    # 23. RL connecting p1-a2
    lst.append({'_id':id_gen(),
                'cid': 'RL',
                'fid': FID,
                'tx': '0',
                'leid': p1eid,
                'reid': a21eid,
                'lconts':['accounts'],
                'rconts':[]
    })

    # 24. chronology-entry CE - ce1
    ce1eid = id_gen()
    lst.append({'_id': ce1eid + '_1',
                'cid': 'CE',
                'fid': FID,
                'tx': '0',
                'ipname':'M7001',
                'title': 'born',
                'date': '1991-01-28',
                'synop': 'In Dortmund, Germany'
    })

    # 25. RL connecting p1-ce1
    lst.append({'_id': id_gen(),
                'cid': 'RL',
                'fid': FID,
                'tx': '0',
                'leid': p1eid,
                'reid': ce1eid,
                'lconts': ['chrons'],
                'rconts': []
    })

    return lst  # 25 entries

def dbmain(db_host, db_port, db_name):
    print 'main'
    portal = DBPortal(db_host,'5984',db_name)
    lst = make_docs()
    #for e in lst:
    #    print e
    portal.initialize_hft(lst)
    
dbname = 'hftdb'

if __name__ == '__main__':
    dbmain('localhost','5984', dbname)
